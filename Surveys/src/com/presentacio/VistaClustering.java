package com.presentacio;

import com.domini.ControladorDominio;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;
import java.util.List;

/**
 * Created by Alejandro on 26/05/2017.
 */
public class VistaClustering {
    private JFrame frame = new JFrame("Clustering");
    private JPanel CPanel;
    private JButton recalc;
    private JTabbedPane tabs;
    private JPanel clusters;
    private JPanel centroids;
    private JScrollPane scrollable;
    private JTable clusterTable;
    private ControladorPresentacio cp;

    public VistaClustering(ControladorPresentacio cp, HashMap<Integer, List<String>> clusts, String name) {
        Initialize(clusts);
        this.cp = cp;
        recalc.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                cp.Clusters(name);
                frame.setVisible(false);
            }
        });
    }

    public void Initialize(HashMap<Integer, List<String>> clusts) {
        int maxAssig = 0;
        for (Map.Entry<Integer, List<String>> entry : clusts.entrySet()) {
            if (entry.getValue().size() > maxAssig)
                maxAssig = entry.getValue().size();
        }
        String[] columnNames = new String[clusts.size()];
        Object[][] data = new Object[maxAssig][clusts.size()];
        for (Integer i = 0; i != clusts.size(); ++i) {
            columnNames[i] = "CLUSTER " + (i + 1);
        }

        for (Map.Entry<Integer, List<String>> entry : clusts.entrySet()) {
            for (String name : entry.getValue()) {
                int i = 0;
                while (data[i][entry.getKey()] != null) ++i;
                data[i][entry.getKey()] = name;
            }
        }
        DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0);
        clusterTable = new JTable(tableModel);
        for (Object[] os : data) {
            tableModel.addRow(os);
        }
        scrollable = new JScrollPane(clusterTable, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        //clusterTable.setFillsViewportHeight(true);
        clusterTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        clusters.add(scrollable);
        frame.add(CPanel);
        CPanel.setPreferredSize(clusterTable.getSize());
        CPanel.setSize(clusterTable.getSize());


        frame.setContentPane(CPanel);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.pack();
        frame.setSize(500, 500);
        frame.setVisible(true);
        frame.setVisible(true);


    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        CPanel = new JPanel();
        CPanel.setLayout(new BorderLayout(0, 0));
        CPanel.setPreferredSize(new Dimension(0, 0));
        scrollable = new JScrollPane();
        CPanel.add(scrollable, BorderLayout.CENTER);
        clusterTable = new JTable();
        clusterTable.setFillsViewportHeight(true);
        clusterTable.setFont(new Font("Georgia", clusterTable.getFont().getStyle(), clusterTable.getFont().getSize()));
        clusterTable.setPreferredScrollableViewportSize(new Dimension(-1, -1));
        scrollable.setViewportView(clusterTable);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return CPanel;
    }
}
